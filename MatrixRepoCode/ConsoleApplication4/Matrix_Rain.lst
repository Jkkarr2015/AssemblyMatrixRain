Microsoft (R) Macro Assembler Version 11.00.61030.0	    04/01/15 12:51:20
main.asm						     Page 1 - 1


				; Description: Matrix Rain
				; 
				; Revision date: 2/13/2015

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data

 00000000 00000000		numRainX dword 0		;storage for increments of 4 for pointer of the last position in x array wanted
 00000004 00000000		numRainY dword 0		;storage for increments of 4 for position of the last position in the y array wanted
 00000008 00000000		numRaining dword 0		;for increments of 1 for pointer to the last position in rainArray 
 0000000C 48 6F 77 20 6D	question byte "How many pieces will fall (under 15)?",0						;number asked to enter that will rain(all at once unless there's a duplicate number, then for now I will see if that really hurts it)
	   61 6E 79 20 70
	   69 65 63 65 73
	   20 77 69 6C 6C
	   20 66 61 6C 6C
	   20 28 75 6E 64
	   65 72 20 31 35
	   29 3F 00
 00000032 30 30 30 30 30	rainArray  byte '0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'
	   30 30 30 30 30
	   30 30 30 30 30
 00000041 00000000		xArray dword 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;and rain character x and y coordinate arrays of 15, initialized to 0 (First level initial idea) 
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 0000007D 00000000		yArray dword 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 000000B9 30			rain byte '0'			;Random int (0 to 9)
 000000BA 00000000		y dword 0				;Y for coordinate
 000000BE 4D 61 74 72 69	titleStr byte "Matrix Rain",0				;Title
	   78 20 52 61 69
	   6E 00
 000000CA 27			beginX byte 39 
 000000CB 59 6F 75 20 77	deathMessage byte "You were hit!...",0
	   65 72 65 20 68
	   69 74 21 2E 2E
	   2E 00

 000000DC 50 6C 61 79 20	replay byte "Play Again? (Y/N)",0
	   41 67 61 69 6E
	   3F 20 28 59 2F
	   4E 29 00
 000000EE 00			response byte 0; Response to yes or no for replay


 00000000			.code

 00000000			main PROC
					
					INVOKE SetConsoleTitle, ADDR titleStr	;calls the title

 0000000A  B8 00000002			mov eax,green + (black * 16);Green Text, black background
 0000000F  E8 00000000 E		call SetTextColor    ;Sets the color
 00000014  33 C0			XOR eax,eax          ;clear eax
					
 00000016  BA 0000000C R		mov edx,offset question		;how many pieces will fall?
 0000001B  E8 00000000 E		call WriteString			;write it
 00000020  33 D2			xor edx,edx

 00000022  E8 00000000 E		call ReadDec
					
 00000027  83 F8 00			cmp eax,0					
 0000002A  0F 8E 00000082		jle  EndLoop				;if num inputted is equal to 0, end

 00000030  8B C8			mov ecx,eax
 00000032  56				push esi
 00000033  BE 00000032 R		mov esi,offset rainArray		
 00000038  A3 00000008 R		mov numRaining,eax			;copy number wanted to make for pieces into numRaining
 0000003D  03 35 00000008 R		add esi,numRaining			;add pointer and num wanted to increment accordingly later in newNum
 00000043  89 35 00000008 R		mov numRaining,esi			;copy into numRaining

 00000049  BE 00000041 R		mov esi,offset xArray
 0000004E  BB 00000004			mov ebx,4
 00000053  F7 E3			mul ebx					;for each increment needed of 4
 00000055  72 5B			jc  EndLoop 
 00000057  03 C6			add eax,esi				;add multiple of 4 and pointer for array size wanted
 00000059  A3 00000000 R		mov numRainX,eax			;save in numRainX(basically just did a LengthOf for dword arrays)
					
 0000005E  8B C1			mov eax,ecx				;copy number inputted into eax
 00000060  BE 0000007D R		mov esi,offset yArray
 00000065  BB 00000004			mov ebx,4
 0000006A  F7 E3			mul ebx					;for each increment needed of 4
 0000006C  72 44			jc  EndLoop 
 0000006E  03 C6			add eax,esi				;add multiple of 4 and pointer for array size wanted
 00000070  A3 00000004 R		mov numRainY,eax			;save in numRainX(basically just did a LengthOf for dword arrays)	
 00000075  5E				pop esi

 00000076  33 C0			xor eax,eax
 00000078  33 C9			xor ecx,ecx
 0000007A  33 DB			xor ebx,ebx				;start with clear registers
 0000007C  E8 00000000 E		call clrscr
 00000081  E8 000001CB			call StartPosition
 00000086  E8 000000E3			call newNum
 0000008B  E8 00000029			call populateX
 00000090				KeyLoop:;Die to break the loop
 00000090  E8 00000084				call checkY
 00000095  E8 000001D5				call print
 0000009A  E8 000000A9				call fall ;call fall proc
						
 0000009F  E8 00000000 E			call ReadKey       ; looks for keyboard input
 000000A4  74 EA				jz KeyLoop

 000000A6  E8 00000156				call RightIf
 000000AB  E8 0000017A				call LeftIf
						
						
 000000B0  EB DE				jmp KeyLoop
 000000B2				EndLoop:
					exit
 000000B9			main ENDP

 000000B9			populateX PROC uses eax ebx ecx;proc for popualating starting X position array for falling char Proc by kilian
 000000BC  56				push esi
 000000BD  BE 00000041 R		mov esi,offset xArray		;at beginning of array
 000000C2  BB 0000007D R		mov ebx,offset yArray		;same
 000000C7  B9 00000032 R		mov ecx,offset rainArray		;same
 000000CC			L1:
 000000CC  B8 00000050			mov eax,80           ;Maybe need to use GetMax later to check size of console window, for now does between randomly 0 and 79
 000000D1  E8 00000000 E		call RandomRange     ;Getting the number
 000000D6  89 06			mov [esi],eax		 ;move the number into it's spot in array 
 000000D8  50				push eax
 000000D9  33 C0			xor eax,eax		 ;reset all y's to 0
 000000DB  89 03			mov [ebx],eax
 000000DD  58				pop eax
					mGotoxy al,[ebx]         ;Moves cursor to 0,X coordinate
 000000DE  52		     1		push edx
 000000DF  8A 33	     1		mov  dh,[ebx]
 000000E1  8A D0	     1		mov  dl,al
 000000E3  E8 00000000 E     1		call Gotoxy
 000000E8  5A		     1		pop  edx
 000000E9  8A 01			mov al,[ecx]          ;Move rain into al
 000000EB  E8 00000000 E		call WriteChar        ;Writes it
 000000F0  33 C0			xor eax,eax 
 000000F2  83 C6 04			add esi,4			  ;point to next array spots
 000000F5  83 C3 04			add ebx,4
 000000F8  FE C3			inc bl
 000000FA  3B 35 00000000 R		cmp esi,numRainX
 00000100  77 12			ja  EndLoop		  ;if about to be greater than number wanted, stop
 00000102  3B 1D 00000004 R		cmp ebx,numRainY
 00000108  77 0A			ja  EndLoop		  ;if about to be greater than number wanted, stop
 0000010A  3B 1D 00000008 R		cmp ebx,numRaining
 00000110  77 02			ja  EndLoop		  ;if about to be greater than number wanted, stop
 00000112  EB B8			jmp L1			  ;else, keep moving through array
 00000114			Endloop:
 00000114  5E				pop esi
					ret
 00000119			populateX ENDP ;end populateX proc

				;---------------------------------------------------------------------------------------------------------------------

 00000119			checkY PROC uses eax;proc to check y-coordinate Proc by Kilian
 0000011A  56				push esi
 0000011B  BE 0000007D R		mov esi,offset yArray;put in beginning pointer to array
 00000120			L1:
 00000120  8B 06			mov eax,[esi]
 00000122  83 F8 18			cmp eax,24d ;see if rain hits the ground
 00000125  74 02			je  _there
 00000127  EB 0F			jmp _endif1
 00000129			_there:
 00000129  E8 000001B2			call Death
 0000012E  E8 0000003B			call newNum ;make new pieces of rain
 00000133  E8 FFFFFF81			call populateX ;make new starting X-coordinates
 00000138			_endif1:
 00000138  83 C6 04			add esi,4				;look at next spot
 0000013B  3B 35 00000004 R		cmp esi,numRainY
 00000141  77 02			ja EndLoop			;if the next spot's number is greater than the number wanted to rain, end
 00000143  EB DB			jmp L1				;if not, keep going through array
 00000145			EndLoop:
 00000145  5E				pop esi
					ret
 00000148			checkY ENDP ;end checkY proc

				;---------------------------------------------------------------------------------------------------------------------

 00000148			fall PROC uses eax;proc for moving pieces down. Proc by Kilian	
 00000149  56					push esi
 0000014A  B8 00000032				mov eax,50	; delay time ms
 0000014F  E8 00000000 E			call Delay		;So we can see change speed
 00000154  BE 0000007D R			mov esi,offset yArray;put the beginning pointer of array into esi
 00000159			L1: 
 00000159  8B 1E				mov ebx,[esi]		;copy contents into ebx
 0000015B  43					inc ebx			;increment y coordinate
 0000015C  89 1E				mov [esi],ebx
 0000015E  83 C6 04				add esi,4			;moves to next position of array
 00000161  3B 35 00000004 R			cmp esi,numRainY
 00000167  77 02				ja EndLoop		;if about to be past number wanted, end
 00000169  EB EE				jmp L1
 0000016B			EndLoop:
 0000016B  5E					pop esi 
					ret
 0000016E			fall ENDP;End move proc

				;---------------------------------------------------------------------------------------------------------------------

 0000016E			newNum PROC;Make a new number and put into rain Proc by Kilian
 0000016E  56					push esi
 0000016F  E8 00000000 E			call Randomize	      ;Makes RandomRange random based on time of day
 00000174  BE 00000032 R			mov esi,offset rainArray		;make pointer to array
 00000179			L1:
 00000179  B0 0A			     mov al,10		      ;Between 0 or 9 inclusive (changed this because I watched the matrix the other day ;p)
 0000017B  E8 00000000 E		     call RandomRange     ;Get the number
 00000180  3C 00				cmp al,0			 ;compare al and 0  
 00000182  75 09			     jne L2               ;If not equal go to L2             
 00000184  C6 05 000000B9 R			mov rain,'0'				 ;if al equals 0, put 0(ASCII) in rain			
	   30
 0000018B  EB 5C				jmp EndLoop
 0000018D			L2:  	
 0000018D  3C 05				cmp al, 5			;If number is greater or below jump accordingly	  
 0000018F  77 0B				ja  above
 00000191  72 2A				jb  below 
 00000193  C6 05 000000B9 R			mov rain,'5'        ;If neither move 5 into rain and end
	   35
 0000019A  EB 4D				jmp EndLoop
 0000019C			above:
 0000019C  3C 07				cmp al,7
 0000019E  77 14				ja  eight
 000001A0  72 09				jb  six
 000001A2  C6 05 000000B9 R			mov rain,'7'		;If neither it's 7
	   37
 000001A9  EB 3E				jmp EndLoop
 000001AB			six:
 000001AB  C6 05 000000B9 R			mov rain,'6'		;if less than 7, must be 6
	   36
 000001B2  EB 35				jmp EndLoop
 000001B4			eight:
 000001B4  C6 05 000000B9 R			mov rain,'8'        ;if greater, 8
	   38
 000001BB  EB 2C				jmp EndLoop
 000001BD			below:
 000001BD  3C 03				cmp al,3
 000001BF  77 21				ja  four
 000001C1  72 09				jb  either
 000001C3  C6 05 000000B9 R			mov rain,'3'		;If neither it's 3
	   33
 000001CA  EB 1D				jmp EndLoop
 000001CC			either:
 000001CC  3C 02				cmp al,2			;if less than 3, could be 2 or 1 
 000001CE  74 09				je  two 
 000001D0  C6 05 000000B9 R			mov rain,'1'		;if not equal to 2, is 1
	   31
 000001D7  EB 10				jmp EndLoop
 000001D9			two:
 000001D9  C6 05 000000B9 R			mov rain,'2'
	   32
 000001E0  EB 07				jmp EndLoop
 000001E2			four:
 000001E2  C6 05 000000B9 R			mov rain,'4'        ;if greater, 4
	   34
 000001E9			EndLoop:
 000001E9  A0 000000B9 R			mov al,rain
 000001EE  88 06				mov [esi],al		;copy character into it's position
 000001F0  46					inc esi
 000001F1  3B 35 00000008 R			cmp esi,numRaining	;see if number wanted to rain is the next spot
 000001F7  77 F0				ja  EndLoop
 000001F9  E9 FFFFFF7B				jmp L1
 000001FE  33 C0				xor eax,eax         ;clear eax
 00000200  C3				ret
 00000201				newNum ENDP;End NewNum proc

				;------------------------------------------------------------------------------------

 00000201			RightIf PROC USES edx;John Proc
 00000202  80 FC 4D			               cmp ah , 4Dh
 00000205  74 02			               je Then1
 00000207  EB 1F		                       jmp endright        ; Jmp to end of proc
 00000209						Then1: 
 00000209  FE 05 000000CA R					inc beginX       ; Increments X coordinate value	
 0000020F  80 3D 000000CA R					if5: cmp beginX, 79; check if X goes past 79
	   4F
 00000216  7F 02							jg then5
 00000218  EB 09							jmp end5
 0000021A								then5: 
 0000021A  C6 05 000000CA R							mov beginX, 79
	   4F
 00000221  B6 17								mov dh, 23
 00000223								end5:
								
 00000223  E8 00000000 E					call ReadKeyFlush;
 00000228				endright:
					ret
 0000022A			 RightIf ENDP

				 ;---------------------------------------------------------------------------------------------------------------------
				 
 0000022A			 LeftIf PROC USES edx;John Proc
 0000022B  80 FC 4B			cmp ah, 4Bh
 0000022E  74 02			 je Then2
 00000230  EB 1D					 jmp endleft        ; Jmp to end of loop if user put in value that is not 3 or left arrow
 00000232						 Then2:
 00000232  FE 0D 000000CA R					 dec beginX      ; Decrements X to move to the left
 00000238  80 3D 000000CA R					 if6: cmp beginX, 0; check if X goes under 0
	   00
 0000023F  7C 02							jl then6
 00000241  EB 07							jmp end6
 00000243								then6: 
 00000243  C6 05 000000CA R							mov beginX, 0
	   00
 0000024A								end6:	
				                     
								 
								 
 0000024A  E8 00000000 E					 call ReadKeyFlush ;Flushes keyboard input buffer and clears internal counter for faster response time
 0000024F						endleft:
							ret
 00000251			 LeftIf ENDP

				 ;------------------------------------------------------------------------------------------------------------------------

				 
 00000251			 StartPosition PROC USES edx;John Proc
	;Player Starting Point
 00000252  B6 17			mov dh , 23d; column 23
 00000254  8A 15 000000CA R		mov dl,beginX ; row 39
 0000025A  E8 00000000 E		call Gotoxy; places cursor in the middle of the bottom part of the console window
 0000025F  B0 58			mov al,'X'; Copies player character to the AL register to be printed
 00000261  E8 00000000 E		call WriteChar; Prints player to screen console
 00000266  E8 00000000 E		call crlf
					;Player Starting point
 0000026B  32 C0			Xor al, al
					ret
 0000026F			 StartPosition ENDP

				;------------------------------------------------------------------------------------------------------------------------


				;******* proc to make it easier to reprint the rain;Kilian Proc

 0000026F			print PROC uses ebx eax ecx 
 00000272  E8 00000000 E			call clrscr
 00000277  56					push esi
 00000278  BE 00000041 R			mov esi,offset xArray
 0000027D  BB 0000007D R			mov ebx,offset yArray
 00000282  B8 00000032 R			mov eax,offset rainArray
 00000287			L1:
 00000287  50					push eax			;save rainArray position
 00000288  8A 06				mov al,[esi]	     ;copy x Coordinate into al
 0000028A  8A 0B				mov cl,[ebx]		;copy y coordinate into cl
						mGotoxy al,cl        ;Moves cursor to the position of rain
 0000028C  52		     1		push edx
 0000028D  8A F1	     1		mov  dh,cl
 0000028F  8A D0	     1		mov  dl,al
 00000291  E8 00000000 E     1		call Gotoxy
 00000296  5A		     1		pop  edx
 00000297  58					pop eax
 00000298  8A 00				mov al,[eax]         ;Moves rain to eax to write
 0000029A  E8 00000000 E			call WriteChar      ;Rewrite rain
 0000029F  40					inc eax			;increment all pointers to arrays
 000002A0  83 C6 04				add esi,4
 000002A3  83 C3 04				add ebx,4

 000002A6  3B 05 00000008 R			cmp eax,numRaining	;compare each to see if they're past their mark	
 000002AC  77 12				ja  EndLoop
 000002AE  3B 1D 00000004 R			cmp ebx,numRainY
 000002B4  77 0A				ja EndLoop
 000002B6  3B 35 00000000 R			cmp esi,numRainX
 000002BC  77 02			     ja EndLoop
 000002BE  EB C7				jmp L1
 000002C0			EndLoop:

 000002C0  B6 17				mov dh,23d  ;move cursor to character's current position ********* Added to this version by Kilian edited by John
 000002C2  8A 15 000000CA R			mov dl , beginX
 000002C8  E8 00000000 E			call Gotoxy
 000002CD  B0 58				mov al,'X'          ;move X into al                              *********
 000002CF  E8 00000000 E			call WriteChar      ;print it					**********
 000002D4  E8 00000000 E			call Crlf
 000002D9  5E					pop esi
 000002DA  32 C0				xor al,al           ;clear al
						ret
 000002E0			print	ENDP

				;----------------------------------------------------------------------------------------------------------------------

 000002E0			Death Proc Uses edx eax ; Added by John Descrpition: Checks where the nummber is and if it is above then X char.

 000002E2  BE 00000041 R		mov esi,offset xArray
 000002E7				If4:
 000002E7			checkAll:
 000002E7  A0 000000CA R			mov al , beginX ; Moves the Character's X coordinate into eax for cmp
 000002EC  8B 1E				mov ebx,[esi]	
 000002EE  3A C3				cmp al , bl	;moves rain's x coordinate into ebx
 000002F0  74 02				je then4
 000002F2  EB 67				jmp yes
 000002F4					then4:
 000002F4  E8 00000000 E				call Clrscr
 000002F9  B6 0C					mov dh, 12
 000002FB  B2 21					mov dl, 33
 000002FD  E8 00000000 E				call Gotoxy; Sets cursor to print kill message
 00000302  BA 000000CB R				mov edx, offset deathmessage
 00000307  E8 00000000 E				call WriteString; Displays deathmessage
 0000030C  E8 00000000 E				call Crlf
 00000311  33 C0					XOR eax,eax; clears eax for the yes/no loop

 00000313					loop1:
 00000313  80 3D 000000EE R				cmp response , 0
	   00
 0000031A  75 1F					jne answer	
 0000031C  B2 21					mov dl,33
 0000031E  B6 0D					mov dh,13
 00000320  E8 00000000 E				call Gotoxy
 00000325  BA 000000DC R				mov edx, offset replay
 0000032A  E8 00000000 E				call WriteString
 0000032F  E8 00000000 E				call Readchar
 00000334  A2 000000EE R				mov response, al
 00000339  EB D8					jmp loop1

 0000033B					answer:
 0000033B  80 0D 000000EE R				 Or response, 00100000B; bitmask for lowercase conversion
	   20
 00000342  80 3D 000000EE R				 cmp response, 'y'; Yes reponse
	   79
 00000349  74 10					 je yes

 0000034B  B6 18				      mov dh, 24
 0000034D  B2 00					 mov dl, 0
 0000034F  E8 00000000 E				 call Gotoxy
							
							 exit; Exits if al is not 'y'
							
 0000035B			yes:
 0000035B  C6 05 000000EE R			mov response,0
	   00
 00000362  83 C6 04				add esi,4 
 00000365  3B 35 00000000 R			cmp esi,numRainX
 0000036B  77 05				ja EndLoop
 0000036D  E9 FFFFFF75				jmp checkAll
 00000372			EndLoop:
						ret
 00000375			Death ENDP

				END main
Microsoft (R) Macro Assembler Version 11.00.61030.0	    04/01/15 12:51:20
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000EF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000375 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Death  . . . . . . . . . . . . .	P Near	 000002E0 _TEXT	Length= 00000095 Public STDCALL
  If4  . . . . . . . . . . . . .	L Near	 000002E7 _TEXT	
  checkAll . . . . . . . . . . .	L Near	 000002E7 _TEXT	
  then4  . . . . . . . . . . . .	L Near	 000002F4 _TEXT	
  loop1  . . . . . . . . . . . .	L Near	 00000313 _TEXT	
  answer . . . . . . . . . . . .	L Near	 0000033B _TEXT	
  yes  . . . . . . . . . . . . .	L Near	 0000035B _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 00000372 _TEXT	
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LeftIf . . . . . . . . . . . . .	P Near	 0000022A _TEXT	Length= 00000027 Public STDCALL
  Then2  . . . . . . . . . . . .	L Near	 00000232 _TEXT	
  if6  . . . . . . . . . . . . .	L Near	 00000238 _TEXT	
  then6  . . . . . . . . . . . .	L Near	 00000243 _TEXT	
  end6 . . . . . . . . . . . . .	L Near	 0000024A _TEXT	
  endleft  . . . . . . . . . . .	L Near	 0000024F _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RightIf  . . . . . . . . . . . .	P Near	 00000201 _TEXT	Length= 00000029 Public STDCALL
  Then1  . . . . . . . . . . . .	L Near	 00000209 _TEXT	
  if5  . . . . . . . . . . . . .	L Near	 0000020F _TEXT	
  then5  . . . . . . . . . . . .	L Near	 0000021A _TEXT	
  end5 . . . . . . . . . . . . .	L Near	 00000223 _TEXT	
  endright . . . . . . . . . . .	L Near	 00000228 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StartPosition  . . . . . . . . .	P Near	 00000251 _TEXT	Length= 0000001E Public STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkY . . . . . . . . . . . . .	P Near	 00000119 _TEXT	Length= 0000002F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000120 _TEXT	
  _there . . . . . . . . . . . .	L Near	 00000129 _TEXT	
  _endif1  . . . . . . . . . . .	L Near	 00000138 _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 00000145 _TEXT	
fall . . . . . . . . . . . . . .	P Near	 00000148 _TEXT	Length= 00000026 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000159 _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 0000016B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B9 Public STDCALL
  KeyLoop  . . . . . . . . . . .	L Near	 00000090 _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 000000B2 _TEXT	
newNum . . . . . . . . . . . . .	P Near	 0000016E _TEXT	Length= 00000093 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000179 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000018D _TEXT	
  above  . . . . . . . . . . . .	L Near	 0000019C _TEXT	
  six  . . . . . . . . . . . . .	L Near	 000001AB _TEXT	
  eight  . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  below  . . . . . . . . . . . .	L Near	 000001BD _TEXT	
  either . . . . . . . . . . . .	L Near	 000001CC _TEXT	
  two  . . . . . . . . . . . . .	L Near	 000001D9 _TEXT	
  four . . . . . . . . . . . . .	L Near	 000001E2 _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 000001E9 _TEXT	
populateX  . . . . . . . . . . .	P Near	 000000B9 _TEXT	Length= 00000060 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000CC _TEXT	
  Endloop  . . . . . . . . . . .	L Near	 00000114 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
print  . . . . . . . . . . . . .	P Near	 0000026F _TEXT	Length= 00000071 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000287 _TEXT	
  EndLoop  . . . . . . . . . . .	L Near	 000002C0 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
beginX . . . . . . . . . . . . .	Byte	 000000CA _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deathMessage . . . . . . . . . .	Byte	 000000CB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numRainX . . . . . . . . . . . .	DWord	 00000000 _DATA	
numRainY . . . . . . . . . . . .	DWord	 00000004 _DATA	
numRaining . . . . . . . . . . .	DWord	 00000008 _DATA	
question . . . . . . . . . . . .	Byte	 0000000C _DATA	
rainArray  . . . . . . . . . . .	Byte	 00000032 _DATA	
rain . . . . . . . . . . . . . .	Byte	 000000B9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
replay . . . . . . . . . . . . .	Byte	 000000DC _DATA	
response . . . . . . . . . . . .	Byte	 000000EE _DATA	
titleStr . . . . . . . . . . . .	Byte	 000000BE _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xArray . . . . . . . . . . . . .	DWord	 00000041 _DATA	
yArray . . . . . . . . . . . . .	DWord	 0000007D _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
y  . . . . . . . . . . . . . . .	DWord	 000000BA _DATA	

	   0 Warnings
	   0 Errors
