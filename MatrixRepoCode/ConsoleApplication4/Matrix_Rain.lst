Microsoft (R) Macro Assembler Version 11.00.61030.0	    04/24/15 01:21:18
main.asm						     Page 1 - 1




				; Description: Matrix Rain
				; 
				; Start date: 2/13/2015
				;Revision date: 4/14/2015

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data

				;Array Variables
 00000000  0000000F [		yArray byte 15 DUP(0)				;Y coordinate array
	    00
	   ]
 0000000F  0000000F [		xArray byte 15 DUP(?)                   ;X coordinate array
	    00
	   ]
 0000001E  0000000F [		rainArray byte 15 DUP(?)                ;Char array for falling pieces
	    00
	   ]

				;Title Variable
 0000002D 4D 61 74 72 69	titleStr byte "Matrix Rain",0				;Title on the title bar for the window
	   78 20 52 61 69
	   6E 00

				;X / Death Proc Variables
 00000039 17			beginX byte 23                          ;Begining X coordinate for player character
 0000003A 59 6F 75 20 77	deathMessage byte "You were hit!...",0  ;Message for being hit
	   65 72 65 20 68
	   69 74 21 2E 2E
	   2E 00
 0000004B 50 6C 61 79 20	replay byte "Play Again? (Y/N)",0       ;Question if player would like to try again
	   41 67 61 69 6E
	   3F 20 28 59 2F
	   4E 29 00
 0000005D 00			response byte 0; Response to yes or no for replay
 0000005E 00000000		count dword 0
 00000062 00000000		items dword ?		;count for number of items wanted to fall

				;Level Names
 00000066 4C 65 76 65 6C	Lvl1 byte "Level 1",0
	   20 31 00
 0000006E 4C 65 76 65 6C	Lvl2 byte "Level 2",0
	   20 32 00
 00000076 4C 65 76 65 6C	Lvl3 byte "Level 3",0
	   20 33 00
 0000007E 4C 65 76 65 6C	Lvl4 byte "Level 4",0
	   20 34 00
 00000086 4C 65 76 65 6C	Lvl5 byte "Level 5",0
	   20 35 00


				;congratulations

 0000008E 43 6F 6E 67 72	Lvl1C byte "Congratulations! You've Completed Level 1!", 0
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   27 76 65 20 43
	   6F 6D 70 6C 65
	   74 65 64 20 4C
	   65 76 65 6C 20
	   31 21 00
 000000B9 43 6F 6E 67 72	Lvl2C byte "Congratulations! You've Completed Level 2!", 0
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   27 76 65 20 43
	   6F 6D 70 6C 65
	   74 65 64 20 4C
	   65 76 65 6C 20
	   32 21 00
 000000E4 43 6F 6E 67 72	Lvl3C byte "Congratulations! You've Completed Level 3!", 0
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   27 76 65 20 43
	   6F 6D 70 6C 65
	   74 65 64 20 4C
	   65 76 65 6C 20
	   33 21 00
 0000010F 43 6F 6E 67 72	Lvl4C byte "Congratulations! You've Completed Level 4!", 0
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   27 76 65 20 43
	   6F 6D 70 6C 65
	   74 65 64 20 4C
	   65 76 65 6C 20
	   34 21 00
 0000013A 43 6F 6E 67 72	Lvl5C byte "Congratulations! You've Completed The Game!!", 0
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   27 76 65 20 43
	   6F 6D 70 6C 65
	   74 65 64 20 54
	   68 65 20 47 61
	   6D 65 21 21 00

 00000167 4D 61 74 72 69	Matrix byte "Matrix Rain",0
	   78 20 52 61 69
	   6E 00
 00000173 54 6F 20 73 74	pressS byte "To start the game press S", 0
	   61 72 74 20 74
	   68 65 20 67 61
	   6D 65 20 70 72
	   65 73 73 20 53
	   00




				;Window Sizing Variables
 0000018D 00000000		outHandle Handle 0            ;Allows us to change the window size
				;BufferBounds COORD <46,25>
 00000191 0000 0000 002D	WindowRect Small_Rect <0,0,45,24>;Left, top, right, and bottom bounds for window size
	   0018

 00000000			.code

 00000000			main PROC
					   ;Window Manipulation area
					   INVOKE GetStdHandle,STD_OUTPUT_HANDLE
 00000007  A3 0000018D R		   mov outHandle,eax
					   INVOKE SetConsoleWindowInfo,outHandle,TRUE,ADDR WindowRect  ;Set console window to coordinates of Size variable
					   INVOKE SetConsoleTitle, ADDR titleStr	;calls the title
 00000028  B8 00000002			   mov eax,green + (black * 16);Green Text, black background
 0000002D  E8 00000000 E		   call SetTextColor      ;Sets the color
 00000032  33 C0			   XOR eax,eax            ;clear eax
					   ;End Window Manipulation area
					   
 00000034  E8 00000000 E		   call clrscr ; Wipes screen for fresh start
 00000039  33 C0			   xor eax,eax

 0000003B  B6 0C			   mov dh, 12
 0000003D  B2 12			   mov dl, 18
 0000003F  E8 00000000 E		   call gotoxy
 00000044  BA 00000167 R		   mov edx,offset Matrix
 00000049  E8 00000000 E		   call WriteString


 0000004E  B6 16			    mov dh, 22
 00000050  B2 00			   mov dl, 0
 00000052  E8 00000000 E		   call gotoxy
 00000057  BA 00000173 R		   mov edx,offset pressS
 0000005C  E8 00000000 E		   call WriteString

 00000061  B6 18			    mov dh, 24
 00000063  B2 2D			   mov dl, 45
 00000065  E8 00000000 E		   call gotoxy
					   
 0000006A			StartGame:
 0000006A  E8 00000000 E		   call ReadKey
 0000006F  A2 0000005D R		   mov response, al
 00000074  80 0D 0000005D R		   Or response, 00100000B ; bitmask for lowercase conversion
	   20
 0000007B  80 3D 0000005D R		   cmp response, 's'
	   73
 00000082  74 02			   je Level1Start
 00000084  EB E4			   jmp StartGame
					   
					   
 00000086			Level1Start:  
 00000086  C6 05 0000005D R		   mov response, 0
	   00
 0000008D  E8 00000000 E		   call clrscr
					   
 00000092  B6 0C			   mov dh, 12
 00000094  B2 14			   mov dl, 20
 00000096  E8 00000000 E		   call gotoxy
 0000009B  BA 00000066 R		   mov edx,offset Lvl1
 000000A0  E8 00000000 E		   call WriteString
 000000A5  B8 000005DC			   mov eax,1500
 000000AA  E8 00000000 E		   call delay
 000000AF  E8 00000000 E		   call clrscr

					   ; Level 1 code area
 000000B4  6A 05			   push 5		;Push number of falling items
 000000B6  E8 00000797			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 000000BB  83 C4 04			   add esp,4
					  
 000000BE  6A 05			   push 5
 000000C0  68 0000000F R		   push offset xArray
 000000C5  6A 2D			   push 45
 000000C7  E8 0000021D			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 000000CC  83 C4 0C			   add esp,12
					  
 000000CF  E8 000002F1			   call Startposition
					   
 000000D4  E8 0000030A			   call Level1
					   ; End of Level 1 code area
 000000D9  E8 00000000 E		   call clrscr
					   
 000000DE  B6 0C			   mov dh, 12
 000000E0  B2 02			   mov dl, 2
 000000E2  E8 00000000 E		   call gotoxy
 000000E7  BA 0000008E R		   mov edx,offset Lvl1C
 000000EC  E8 00000000 E		   call WriteString
 000000F1  B8 000007D0			   mov eax,2000
 000000F6  E8 00000000 E		   call delay
					  
 000000FB			Level2Start:
 000000FB  E8 00000000 E		   call clrscr


 00000100  E8 00000AA8			   call RefreshY
 00000105  B6 0C			   mov dh, 12
 00000107  B2 14			   mov dl, 20
 00000109  E8 00000000 E		   call gotoxy
 0000010E  BA 0000006E R		   mov edx,offset Lvl2
 00000113  E8 00000000 E		   call WriteString
 00000118  B8 000005DC			   mov eax,1500
 0000011D  E8 00000000 E		   call delay
 00000122  E8 00000000 E		   call clrscr

					   	   ; Level 2 code area
 00000127  6A 07			   push 7		;Push number of falling items
 00000129  E8 00000724			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 0000012E  83 C4 04			   add esp,4
					  
 00000131  6A 07			   push 7
 00000133  68 0000000F R		   push offset xArray
 00000138  6A 2D			   push 45
 0000013A  E8 000001AA			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 0000013F  83 C4 0C			   add esp,12
					  
 00000142  E8 0000027E			   call Startposition
					   
 00000147  E8 0000037A			   call Level2

					   
 0000014C  E8 00000000 E		   call clrscr

 00000151  B6 0C			   mov dh, 12
 00000153  B2 02			   mov dl, 2
 00000155  E8 00000000 E		   call gotoxy
 0000015A  BA 000000B9 R		   mov edx,offset Lvl2C
 0000015F  E8 00000000 E		   call WriteString
 00000164  B8 000007D0			   mov eax,2000
 00000169  E8 00000000 E		   call delay
 0000016E			Level3Start:

 0000016E  E8 00000000 E		   call clrscr

 00000173  E8 00000A35			   call RefreshY
 00000178  B6 0C			   mov dh, 12
 0000017A  B2 14			   mov dl, 20
 0000017C  E8 00000000 E		   call gotoxy
 00000181  BA 00000076 R		   mov edx,offset Lvl3
 00000186  E8 00000000 E		   call WriteString
 0000018B  B8 000005DC			   mov eax,1500
 00000190  E8 00000000 E		   call delay
 00000195  E8 00000000 E		   call clrscr

					   	   ; Level 3 code area
 0000019A  6A 09			   push 9		;Push number of falling items
 0000019C  E8 000006B1			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 000001A1  83 C4 04			   add esp,4
					  
 000001A4  6A 09			   push 9
 000001A6  68 0000000F R		   push offset xArray
 000001AB  6A 2D			   push 45
 000001AD  E8 00000137			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 000001B2  83 C4 0C			   add esp,12
					  
 000001B5  E8 0000020B			   call Startposition
					   
 000001BA  E8 000003EA			   call Level3

					   ; End of Level 3 code area
 000001BF  E8 00000000 E		   call clrscr

 000001C4  B6 0C			   mov dh, 12
 000001C6  B2 02			   mov dl, 2
 000001C8  E8 00000000 E		   call gotoxy
 000001CD  BA 000000E4 R		   mov edx,offset Lvl3C
 000001D2  E8 00000000 E		   call WriteString
 000001D7  B8 000007D0			   mov eax,2000
 000001DC  E8 00000000 E		   call delay
 000001E1			Level4Start:
 000001E1  E8 00000000 E		   call clrscr

 000001E6  E8 000009C2			   call RefreshY
 000001EB  B6 0C			   mov dh, 12
 000001ED  B2 14			   mov dl, 20
 000001EF  E8 00000000 E		   call gotoxy
 000001F4  BA 0000007E R		   mov edx,offset Lvl4
 000001F9  E8 00000000 E		   call WriteString
 000001FE  B8 000005DC			   mov eax,1500
 00000203  E8 00000000 E		   call delay
 00000208  E8 00000000 E		   call clrscr

					   	   ; Level 4 code area
 0000020D  6A 0C			   push 12		;Push number of falling items
 0000020F  E8 0000063E			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 00000214  83 C4 04			   add esp,4
					  
 00000217  6A 0C			   push 12
 00000219  68 0000000F R		   push offset xArray
 0000021E  6A 2D			   push 45
 00000220  E8 000000C4			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000225  83 C4 0C			   add esp,12
					  
 00000228  E8 00000198			   call Startposition
					   
 0000022D  E8 0000045A			   call Level4

					   ; End of Level 4 code area
 00000232  E8 00000000 E		   call clrscr

 00000237  B6 0C			   mov dh, 12
 00000239  B2 02			   mov dl, 2
 0000023B  E8 00000000 E		   call gotoxy
 00000240  BA 0000010F R		   mov edx,offset Lvl4C
 00000245  E8 00000000 E		   call WriteString
 0000024A  B8 000007D0			   mov eax,2000
 0000024F  E8 00000000 E		   call delay
					   
 00000254			Level5Start:
 00000254  E8 00000000 E		   call clrscr

 00000259  E8 0000094F			   call RefreshY
 0000025E  B6 0C			   mov dh, 12
 00000260  B2 14			   mov dl, 20
 00000262  E8 00000000 E		   call gotoxy
 00000267  BA 00000086 R		   mov edx,offset Lvl5
 0000026C  E8 00000000 E		   call WriteString
 00000271  B8 000003E8			   mov eax,1000
 00000276  E8 00000000 E		   call delay
 0000027B  E8 00000000 E		   call clrscr

					   	   ; Level 5 code area
 00000280  6A 0F			   push 15		;Push number of falling items
 00000282  E8 000005CB			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 00000287  83 C4 04			   add esp,4
					  
 0000028A  6A 0F			   push 15
 0000028C  68 0000000F R		   push offset xArray
 00000291  6A 2D			   push 45
 00000293  E8 00000051			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000298  83 C4 0C			   add esp,12
					  
 0000029B  E8 00000125			   call Startposition
					   
 000002A0  E8 000004CA			   call Level5

					   ; End of Level 5 code area
 000002A5  E8 00000000 E		   call clrscr

 000002AA  B6 0C			   mov dh, 12
 000002AC  B2 00			   mov dl, 0
 000002AE  E8 00000000 E		   call gotoxy
 000002B3  BA 0000013A R		   mov edx,offset Lvl5C
 000002B8  E8 00000000 E		   call WriteString
 000002BD  B6 0B			   mov dh, 11
 000002BF  B2 18			   mov dl, 24
 000002C1  E8 00000000 E		   call gotoxy
 000002C6  B0 01			   mov al, 1
 000002C8  E8 00000000 E		   call WriteChar
 000002CD  B8 000007D0			   mov eax,2000
 000002D2  E8 00000000 E		   call delay
					   
 000002D7  B6 18			   mov dh , 24
 000002D9  B2 00			   mov dl, 0

 000002DB  E8 00000000 E		   call gotoxy
 000002E0  EB 00			   jmp EndGame

 000002E2			EndGame:
					   exit
 000002E9			main ENDP


 000002E9			FillArray proc uses ecx       ; Parameters (Number of elements,Offset Array, Range for numbers) made by John K
 000002EA  55				    push ebp             ; Pushing it to access parameters from stack
 000002EB  8B EC			    mov ebp, esp
 000002ED  E8 00000000 E		    call Randomize	       ;Makes RandomRange random based on time of day 
 000002F2  8B 4D 14			    mov ecx, [ebp + 20]  ; Moves first parameter that will be the number for the counter

 000002F5  8B 7D 10			    mov edi, [ebp + 16]  ; Offset of array put into edi
 000002F8			L1: 
 000002F8  83 F9 00			    cmp ecx ,0           ; Loop for setting entire array with random values
 000002FB  74 0D			    je endL1
 000002FD  8B 45 0C			    mov eax,[ebp + 12]    ; Range Paramet put into eax
 00000300  E8 00000000 E		    call RandomRange
 00000305  FC				    cld                  ; Set direction to forward for the array intialization
 00000306  AA				    stosb                ; Stores contents of eax into array
 00000307  49				    dec ecx              ; decrements counter
 00000308  EB EE			    jmp L1
 0000030A			endL1:

 0000030A  5D				    pop ebp              ; restores Ebp
					    
					    ret
 0000030D			FillArray endp
				;---------------------------------------------------------------------------------------------------------------------


				;----------------------------------------------------------------------------------------------------------------------

 0000030D			Reset PROC uses eax ebx 
 0000030F  C6 86 00000000 R		mov yArray[esi],0
	   00

 00000316  B0 02			mov al, 2
 00000318  E8 00000000 E		call RandomRange

 0000031D  3C 00			cmp al, 0
 0000031F  75 0B			jne L2
 00000321  C6 86 0000001E R		mov rainArray[esi], '0'; Movs char zero into rain
	   30
 00000328  33 C0			XOR eax,eax; Clears EAX
 0000032A  EB 09			jmp _End
 0000032C			L2:
 0000032C  C6 86 0000001E R		mov rainArray[esi], '1'
	   31
 00000333  33 C0			XOR eax,eax
 00000335			_End:

 00000335  B0 2D			mov al,45
 00000337  E8 00000000 E		call RandomRange 

 0000033C  88 86 0000000F R		mov xArray[esi],al
					
					ret
 00000345			Reset ENDP

				;---------------------------------------------------------------------------------------------------------------------

 00000345			fall PROC uses eax ;proc for moving pieces downProc by Kilian	
				; Parameter (Int indexOfElement)


					
						
						


 00000346  56					push esi
 00000347  8B F3				mov esi,ebx
					    ;mov eax, 25
					    ;call delay
 00000349			All:
 00000349  80 BE 00000000 R			cmp yArray[esi],23
	   17
 00000350  74 02				je  _Reset
 00000352  EB 23				jmp endDeath
 00000354			_Reset:
 00000354  A0 00000039 R			mov al, beginX
 00000359  38 86 0000000F R		     cmp xArray[esi], al 
 0000035F  0F 84 00000524			je Death
 00000365  FF 0D 00000062 R			dec items
 0000036B  E8 FFFFFF9D				call Reset
 00000370  EB 0B				jmp EndAll
 00000372			EndReset:

 00000372			Death:
 00000372  E8 FFFFFFFB				call Death
 00000377			endDeath:

 00000377  FE 86 00000000 R			inc yArray[esi]		 ;increment y coordinate

 0000037D			EndAll:	    
 0000037D  5E					pop esi
						
						ret
 00000380			fall ENDP;End move proc

				;---------------------------------------------------------------------------------------------------------------------

 00000380			RightIf PROC USES edx;John Proc
 00000381  80 FC 4D			     cmp ah , 4Dh
 00000384  74 02			     je Then1
 00000386  EB 14		          jmp endright           ; Jmp to end of proc

 00000388			Then1: 
 00000388  80 3D 00000039 R			cmp beginX , 45
	   2D
 0000038F  74 06				je outX
 00000391  FE 05 00000039 R			inc beginX             ; Increments X coordinate value	
 00000397			outX:
						

 00000397  E8 00000000 E			call ReadKeyFlush 
					
 0000039C			endright:
					     
						ret
 0000039E			 RightIf ENDP

				 ;---------------------------------------------------------------------------------------------------------------------
				 
 0000039E			 LeftIf PROC USES edx;John Proc
 0000039F  80 FC 4B			     cmp ah, 4Bh
 000003A2  74 02			     je Then2
 000003A4  EB 1D			     jmp endleft             ; Jmp to end of loop if user put in value that is not 3 or left arrow
 000003A6			Then2:
 000003A6  FE 0D 00000039 R		     dec beginX              ; Decrements X to move to the left
 000003AC			if6:      
 000003AC  80 3D 00000039 R	          cmp beginX, 0           ; check if X goes under 0
	   00
 000003B3  7C 02			     jl then6
 000003B5  EB 07			     jmp end6

 000003B7			then6: 
 000003B7  C6 05 00000039 R		     mov beginX, 0
	   00
 000003BE			end6:

 000003BE  E8 00000000 E		     call ReadKeyFlush       ;Flushes keyboard input buffer and clears internal counter for faster response time
 000003C3			endleft:
					 
					     ret
 000003C5			 LeftIf ENDP

				 ;------------------------------------------------------------------------------------------------------------------------

				 
 000003C5			 StartPosition PROC USES edx;John Proc
					     ;Player Starting Point
 000003C6  B6 17			     mov dh , 23d            ; column 24
 000003C8  8A 15 00000039 R		     mov dl,beginX           ; row 39
 000003CE  E8 00000000 E		     call Gotoxy             ; places cursor in the middle of the bottom part of the console window
 000003D3  B0 58			     mov al,'X'              ; Copies player character to the AL register to be printed
 000003D5  E8 00000000 E		     call WriteChar          ; Prints player to screen console
 000003DA  E8 00000000 E		     call crlf
					     ;Player Starting point
 000003DF  32 C0			     Xor al, al
					     
						ret
 000003E3			 StartPosition ENDP

				;------------------------------------------------------------------------------------------------------------------------


				;******* proc to make it easier to reprint the rain;JOHN PROC

 000003E3			Level1 PROC 
						
 000003E3  C7 05 00000062 R			mov items,20		
	   00000014
 000003ED  BE 00000000				mov esi,0
 000003F2  C7 05 0000005E R			mov count, 0; intilize as zero to reset the print proc
	   00000000

 000003FC			PrintAll: 
								
 000003FC  8B 0D 0000005E R	          mov ecx, count
 00000402  BB 00000000				mov ebx , 0
 00000407  83 FE 04				cmp esi,4
 0000040A  74 02				je four
 0000040C  EB 05				jmp end4

 0000040E			four:
 0000040E  BE 00000004		      mov esi , 4
 00000413			end4:

 00000413			inLoop2:
						
 00000413  8A 93 0000000F R			mov dl,xArray[ebx]

 00000419  8A B3 00000000 R			mov dh,yArray[ebx]
 0000041F  E8 00000000 E			call Gotoxy            ;Moves cursor to the position of rain
						
						
 00000424  8A 83 0000001E R			mov al,rainArray[ebx]
 0000042A  E8 00000000 E			call WriteChar          ;Rewrite rain

					

 0000042F  E8 FFFFFF11				call fall
					

 00000434  83 3D 00000062 R			cmp items,0
	   00
 0000043B  0F 84 00000084			jz  EndPrint

 00000441  83 F9 00				cmp ecx, 0
 00000444  75 02				jne decrease
 00000446  EB 01				jmp endD
 00000448			decrease:
 00000448  49					dec ecx
 00000449			endD:
 00000449  43					inc ebx

						
					    


 0000044A  3B DE				cmp ebx, esi
 0000044C  77 02				ja endinLoop
 0000044E  EB C3				jmp inLoop2

 00000450			endinLoop:
						
 00000450  B8 00000069				mov eax , 105
 00000455  E8 00000000 E			call delay
 0000045A  E8 00000000 E			call clrscr
						
 0000045F  B6 17				mov dh,23d              ;move cursor to character's current position ********* Added to this version by Killian edited by John
 00000461  8A 15 00000039 R			mov dl , beginX
 00000467  E8 00000000 E			call Gotoxy
 0000046C  B0 58				mov al,'X'              ;move X into al                              *********
 0000046E  E8 00000000 E			call WriteChar          ;print it					**********
 00000473  E8 00000000 E			call Crlf
 00000478  32 C0				xor al,al               ;clear

 0000047A  51					push ecx
 0000047B  E8 00000000 E			call ReadKey
 00000480  E8 FFFFFEFB				call Rightif
 00000485  E8 FFFFFF14				call Leftif
 0000048A  59					pop ecx

 0000048B  83 F9 00				cmp ecx, 0
 0000048E  74 0A				je  random
 00000490  BB 00000000				mov ebx, 0
 00000495  E9 FFFFFF79				jmp inLoop2
 0000049A			random:
						
 0000049A  B8 00000005				mov eax, 5
 0000049F  E8 00000000 E			call RandomRange
 000004A4  8B D8				mov ebx, eax

 000004A6  83 FB 00				cmp ebx , 0
 000004A9  74 05				je Increase
 000004AB  E9 FFFFFF4C				jmp PrintAll


 000004B0			Increase:
 000004B0  83 FE 04				cmp esi, 4
 000004B3  0F 84 FFFFFF43			je PrintAll
 000004B9  FF 05 0000005E R			inc count
 000004BF  46					inc esi 
 000004C0  E9 FFFFFF37				jmp PrintAll
 000004C5			EndPrint:
						
 000004C5  C3					ret
 000004C6			Level1		ENDP

				;------------------------------------------------------------------------------------------------


 000004C6			Level2 PROC 
						
 000004C6  C7 05 00000062 R			mov items,40		
	   00000028
 000004D0  BE 00000000				mov esi,0
 000004D5  C7 05 0000005E R			mov count, 0; intilize as zero to reset the print proc
	   00000000

 000004DF			PrintAll: 
								
 000004DF  8B 0D 0000005E R	          mov ecx, count
 000004E5  BB 00000000				mov ebx , 0
 000004EA  83 FE 06				cmp esi,6
 000004ED  74 02				je four
 000004EF  EB 05				jmp end4

 000004F1			four:
 000004F1  BE 00000006		      mov esi , 6
 000004F6			end4:

 000004F6			inLoop2:
						
 000004F6  8A 93 0000000F R			mov dl,xArray[ebx]

 000004FC  8A B3 00000000 R			mov dh,yArray[ebx]
 00000502  E8 00000000 E			call Gotoxy            ;Moves cursor to the position of rain
						
						
 00000507  8A 83 0000001E R			mov al,rainArray[ebx]
 0000050D  E8 00000000 E			call WriteChar          ;Rewrite rain

					

 00000512  E8 FFFFFE2E				call fall
					

 00000517  83 3D 00000062 R			cmp items,0
	   00
 0000051E  0F 84 00000084			jz  EndPrint

 00000524  83 F9 00				cmp ecx, 0
 00000527  75 02				jne decrease
 00000529  EB 01				jmp endD
 0000052B			decrease:
 0000052B  49					dec ecx
 0000052C			endD:
 0000052C  43					inc ebx

						
					    


 0000052D  3B DE				cmp ebx, esi
 0000052F  77 02				ja endinLoop
 00000531  EB C3				jmp inLoop2

 00000533			endinLoop:
						
 00000533  B8 00000067				mov eax , 103
 00000538  E8 00000000 E			call delay
 0000053D  E8 00000000 E			call clrscr
						
 00000542  B6 17				mov dh,23d              ;move cursor to character's current position ********* Added to this version by Killian edited by John
 00000544  8A 15 00000039 R			mov dl , beginX
 0000054A  E8 00000000 E			call Gotoxy
 0000054F  B0 58				mov al,'X'              ;move X into al                              *********
 00000551  E8 00000000 E			call WriteChar          ;print it					**********
 00000556  E8 00000000 E			call Crlf
 0000055B  32 C0				xor al,al               ;clear

 0000055D  51					push ecx
 0000055E  E8 00000000 E			call ReadKey
 00000563  E8 FFFFFE18				call Rightif
 00000568  E8 FFFFFE31				call Leftif
 0000056D  59					pop ecx

 0000056E  83 F9 00				cmp ecx, 0
 00000571  74 0A				je  random
 00000573  BB 00000000				mov ebx, 0
 00000578  E9 FFFFFF79				jmp inLoop2
 0000057D			random:
						
 0000057D  B8 00000005				mov eax, 5
 00000582  E8 00000000 E			call RandomRange
 00000587  8B D8				mov ebx, eax

 00000589  83 FB 00				cmp ebx , 0
 0000058C  74 05				je Increase
 0000058E  E9 FFFFFF4C				jmp PrintAll


 00000593			Increase:
 00000593  83 FE 06				cmp esi, 6
 00000596  0F 84 FFFFFF43			je PrintAll
 0000059C  FF 05 0000005E R			inc count
 000005A2  46					inc esi 
 000005A3  E9 FFFFFF37				jmp PrintAll
 000005A8			EndPrint:
						
 000005A8  C3					ret
 000005A9			Level2		ENDP

				;-------------------------------------------------------------------------------------

 000005A9			Level3 PROC 
						
 000005A9  C7 05 00000062 R			mov items,60		
	   0000003C
 000005B3  BE 00000000				mov esi,0
 000005B8  C7 05 0000005E R			mov count, 0; intilize as zero to reset the print proc
	   00000000

 000005C2			PrintAll: 
								
 000005C2  8B 0D 0000005E R	          mov ecx, count
 000005C8  BB 00000000				mov ebx , 0
 000005CD  83 FE 08				cmp esi,8
 000005D0  74 02				je four
 000005D2  EB 05				jmp end4

 000005D4			four:
 000005D4  BE 00000008		      mov esi , 8
 000005D9			end4:

 000005D9			inLoop2:
						
 000005D9  8A 93 0000000F R			mov dl,xArray[ebx]

 000005DF  8A B3 00000000 R			mov dh,yArray[ebx]
 000005E5  E8 00000000 E			call Gotoxy            ;Moves cursor to the position of rain
						
						
 000005EA  8A 83 0000001E R			mov al,rainArray[ebx]
 000005F0  E8 00000000 E			call WriteChar          ;Rewrite rain

					

 000005F5  E8 FFFFFD4B				call fall
					

 000005FA  83 3D 00000062 R			cmp items,0
	   00
 00000601  0F 84 00000084			jz  EndPrint

 00000607  83 F9 00				cmp ecx, 0
 0000060A  75 02				jne decrease
 0000060C  EB 01				jmp endD
 0000060E			decrease:
 0000060E  49					dec ecx
 0000060F			endD:
 0000060F  43					inc ebx

						
					    


 00000610  3B DE				cmp ebx, esi
 00000612  77 02				ja endinLoop
 00000614  EB C3				jmp inLoop2

 00000616			endinLoop:
						
 00000616  B8 00000065				mov eax , 101
 0000061B  E8 00000000 E			call delay
 00000620  E8 00000000 E			call clrscr
						
 00000625  B6 17				mov dh,23d              ;move cursor to character's current position ********* Added to this version by Killian edited by John
 00000627  8A 15 00000039 R			mov dl , beginX
 0000062D  E8 00000000 E			call Gotoxy
 00000632  B0 58				mov al,'X'              ;move X into al                              *********
 00000634  E8 00000000 E			call WriteChar          ;print it					**********
 00000639  E8 00000000 E			call Crlf
 0000063E  32 C0				xor al,al               ;clear

 00000640  51					push ecx
 00000641  E8 00000000 E			call ReadKey
 00000646  E8 FFFFFD35				call Rightif
 0000064B  E8 FFFFFD4E				call Leftif
 00000650  59					pop ecx

 00000651  83 F9 00				cmp ecx, 0
 00000654  74 0A				je  random
 00000656  BB 00000000				mov ebx, 0
 0000065B  E9 FFFFFF79				jmp inLoop2
 00000660			random:
						
 00000660  B8 00000005				mov eax, 5
 00000665  E8 00000000 E			call RandomRange
 0000066A  8B D8				mov ebx, eax

 0000066C  83 FB 00				cmp ebx , 0
 0000066F  74 05				je Increase
 00000671  E9 FFFFFF4C				jmp PrintAll


 00000676			Increase:
 00000676  83 FE 08				cmp esi, 8
 00000679  0F 84 FFFFFF43			je PrintAll
 0000067F  FF 05 0000005E R			inc count
 00000685  46					inc esi 
 00000686  E9 FFFFFF37				jmp PrintAll
 0000068B			EndPrint:
						
 0000068B  C3					ret
 0000068C			Level3		ENDP

				;----------------------------------------------------------------------------------------------

 0000068C			Level4 PROC 
						
 0000068C  C7 05 00000062 R			mov items,80		
	   00000050
 00000696  BE 00000000				mov esi,0
 0000069B  C7 05 0000005E R			mov count, 0; intilize as zero to reset the print proc
	   00000000

 000006A5			PrintAll: 
								
 000006A5  8B 0D 0000005E R	          mov ecx, count
 000006AB  BB 00000000				mov ebx , 0
 000006B0  83 FE 0B				cmp esi,11
 000006B3  74 02				je four
 000006B5  EB 05				jmp end4

 000006B7			four:
 000006B7  BE 0000000B		      mov esi , 11
 000006BC			end4:

 000006BC			inLoop2:
						
 000006BC  8A 93 0000000F R			mov dl,xArray[ebx]

 000006C2  8A B3 00000000 R			mov dh,yArray[ebx]
 000006C8  E8 00000000 E			call Gotoxy            ;Moves cursor to the position of rain
						
						
 000006CD  8A 83 0000001E R			mov al,rainArray[ebx]
 000006D3  E8 00000000 E			call WriteChar          ;Rewrite rain

					

 000006D8  E8 FFFFFC68				call fall
					

 000006DD  83 3D 00000062 R			cmp items,0
	   00
 000006E4  0F 84 00000084			jz  EndPrint

 000006EA  83 F9 00				cmp ecx, 0
 000006ED  75 02				jne decrease
 000006EF  EB 01				jmp endD
 000006F1			decrease:
 000006F1  49					dec ecx
 000006F2			endD:
 000006F2  43					inc ebx

						
					    


 000006F3  3B DE				cmp ebx, esi
 000006F5  77 02				ja endinLoop
 000006F7  EB C3				jmp inLoop2

 000006F9			endinLoop:
						
 000006F9  B8 00000063				mov eax , 99
 000006FE  E8 00000000 E			call delay
 00000703  E8 00000000 E			call clrscr
						
 00000708  B6 17				mov dh,23d              ;move cursor to character's current position ********* Added to this version by Killian edited by John
 0000070A  8A 15 00000039 R			mov dl , beginX
 00000710  E8 00000000 E			call Gotoxy
 00000715  B0 58				mov al,'X'              ;move X into al                              *********
 00000717  E8 00000000 E			call WriteChar          ;print it					**********
 0000071C  E8 00000000 E			call Crlf
 00000721  32 C0				xor al,al               ;clear

 00000723  51					push ecx
 00000724  E8 00000000 E			call ReadKey
 00000729  E8 FFFFFC52				call Rightif
 0000072E  E8 FFFFFC6B				call Leftif
 00000733  59					pop ecx

 00000734  83 F9 00				cmp ecx, 0
 00000737  74 0A				je  random
 00000739  BB 00000000				mov ebx, 0
 0000073E  E9 FFFFFF79				jmp inLoop2
 00000743			random:
						
 00000743  B8 00000005				mov eax, 5
 00000748  E8 00000000 E			call RandomRange
 0000074D  8B D8				mov ebx, eax

 0000074F  83 FB 00				cmp ebx , 0
 00000752  74 05				je Increase
 00000754  E9 FFFFFF4C				jmp PrintAll


 00000759			Increase:
 00000759  83 FE 0B				cmp esi, 11
 0000075C  0F 84 FFFFFF43			je PrintAll
 00000762  FF 05 0000005E R			inc count
 00000768  46					inc esi 
 00000769  E9 FFFFFF37				jmp PrintAll
 0000076E			EndPrint:
						
 0000076E  C3					ret
 0000076F			Level4		ENDP

				;----------------------------------------------------------------------------------------------

 0000076F			Level5 PROC 
						
 0000076F  C7 05 00000062 R			mov items,100		
	   00000064
 00000779  BE 00000000				mov esi,0
 0000077E  C7 05 0000005E R			mov count, 0; intilize as zero to reset the print proc
	   00000000

 00000788			PrintAll: 
								
 00000788  8B 0D 0000005E R	          mov ecx, count
 0000078E  BB 00000000				mov ebx , 0
 00000793  83 FE 0E				cmp esi,14
 00000796  74 02				je four
 00000798  EB 05				jmp end4

 0000079A			four:
 0000079A  BE 0000000E		      mov esi , 14
 0000079F			end4:

 0000079F			inLoop2:
						
 0000079F  8A 93 0000000F R			mov dl,xArray[ebx]

 000007A5  8A B3 00000000 R			mov dh,yArray[ebx]
 000007AB  E8 00000000 E			call Gotoxy            ;Moves cursor to the position of rain
						
						
 000007B0  8A 83 0000001E R			mov al,rainArray[ebx]
 000007B6  E8 00000000 E			call WriteChar          ;Rewrite rain

					

 000007BB  E8 FFFFFB85				call fall
					

 000007C0  83 3D 00000062 R			cmp items,0
	   00
 000007C7  0F 84 00000084			jz  EndPrint

 000007CD  83 F9 00				cmp ecx, 0
 000007D0  75 02				jne decrease
 000007D2  EB 01				jmp endD
 000007D4			decrease:
 000007D4  49					dec ecx
 000007D5			endD:
 000007D5  43					inc ebx

						
					    


 000007D6  3B DE				cmp ebx, esi
 000007D8  77 02				ja endinLoop
 000007DA  EB C3				jmp inLoop2

 000007DC			endinLoop:
						
 000007DC  B8 00000061				mov eax , 97
 000007E1  E8 00000000 E			call delay
 000007E6  E8 00000000 E			call clrscr
						
 000007EB  B6 17				mov dh,23d              ;move cursor to character's current position ********* Added to this version by Killian edited by John
 000007ED  8A 15 00000039 R			mov dl , beginX
 000007F3  E8 00000000 E			call Gotoxy
 000007F8  B0 58				mov al,'X'              ;move X into al                              *********
 000007FA  E8 00000000 E			call WriteChar          ;print it					**********
 000007FF  E8 00000000 E			call Crlf
 00000804  32 C0				xor al,al               ;clear

 00000806  51					push ecx
 00000807  E8 00000000 E			call ReadKey
 0000080C  E8 FFFFFB6F				call Rightif
 00000811  E8 FFFFFB88				call Leftif
 00000816  59					pop ecx

 00000817  83 F9 00				cmp ecx, 0
 0000081A  74 0A				je  random
 0000081C  BB 00000000				mov ebx, 0
 00000821  E9 FFFFFF79				jmp inLoop2
 00000826			random:
						
 00000826  B8 00000005				mov eax, 5
 0000082B  E8 00000000 E			call RandomRange
 00000830  8B D8				mov ebx, eax

 00000832  83 FB 00				cmp ebx , 0
 00000835  74 05				je Increase
 00000837  E9 FFFFFF4C				jmp PrintAll


 0000083C			Increase:
 0000083C  83 FE 0E				cmp esi, 14
 0000083F  0F 84 FFFFFF43			je PrintAll
 00000845  FF 05 0000005E R			inc count
 0000084B  46					inc esi 
 0000084C  E9 FFFFFF37				jmp PrintAll
 00000851			EndPrint:
						
 00000851  C3					ret
 00000852			Level5		ENDP


				;----------------------------------------------------------------------------------------------------------------------

 00000852			newNum Proc
 00000852  55				push ebp
 00000853  8B EC			mov ebp,esp
 00000855  8B 4D 08			mov ecx,[ebp+8]
 00000858  BE 00000000			mov esi,0
 0000085D			L1:
 0000085D  B0 02			mov al, 2
 0000085F  E8 00000000 E		call RandomRange

 00000864  83 F9 00			cmp ecx, 0
 00000867  74 1E			je ENDL
 00000869  3C 00			cmp al, 0
 0000086B  75 0D			jne L2
 0000086D  C6 86 0000001E R		mov rainArray[esi], '0'; Movs char zero into rain
	   30
 00000874  33 C0			XOR eax,eax; Clears EAX
 00000876  46				inc esi
 00000877  49				dec ecx
 00000878  EB E3			jmp L1
 0000087A			L2:
 0000087A  C6 86 0000001E R		mov rainArray[esi], '1'
	   31
 00000881  33 C0			XOR eax,eax
 00000883  46				inc esi
 00000884  49				dec ecx
 00000885  EB D6			jmp L1
 00000887			ENDL:
 00000887  5D				pop ebp
 00000888  C3				ret
 00000889			newNum endp

				;--------------------------------------------------------------------------------------------------------------------------
 00000889			Death Proc Uses edx eax ; Added by John Descrpition: Checks where the nummber is and if it is above then X char.
					
 0000088B  E8 00000000 E			call Clrscr
 00000890  B6 0C				mov dh, 12
 00000892  B2 0E				mov dl, 14
 00000894  E8 00000000 E			call Gotoxy             ; Sets cursor to print kill message
 00000899  BA 0000003A R			mov edx, offset deathmessage
 0000089E  E8 00000000 E			call WriteString        ; Displays deathmessage
 000008A3  E8 00000000 E			call Crlf
 000008A8  33 C0				XOR eax,eax             ; clears eax for the yes/no loop

 000008AA			loop1:
 000008AA  80 3D 0000005D R			cmp response , 0
	   00
 000008B1  75 1F				jne answer	
 000008B3  B2 0E				mov dl,14
 000008B5  B6 0D				mov dh,13
 000008B7  E8 00000000 E			call Gotoxy
 000008BC  BA 0000004B R			mov edx, offset replay
 000008C1  E8 00000000 E			call WriteString
 000008C6  E8 00000000 E			call Readchar
 000008CB  A2 0000005D R			mov response, al
 000008D0  EB D8				jmp loop1

 000008D2			answer:
 000008D2  80 0D 0000005D R			Or response, 00100000B ; bitmask for lowercase conversion
	   20
 000008D9  80 3D 0000005D R			cmp response, 'y'      ; Yes reponse
	   79
 000008E0  74 10				je yes

 000008E2  B6 18				mov dh, 24
 000008E4  B2 00			     mov dl, 0
 000008E6  E8 00000000 E			call Gotoxy
					
						exit                   ; Exits if al is not 'y'
						
 000008F2			yes:
					
 000008F2  C6 05 0000005D R			mov response,0
	   00
						   
 000008F9  E8 00000000 E		   call clrscr ; Wipes screen for fresh start
 000008FE  33 C0			   xor eax,eax

 00000900  B6 0C			   mov dh, 12
 00000902  B2 12			   mov dl, 18
 00000904  E8 00000000 E		   call gotoxy
 00000909  BA 00000167 R		   mov edx,offset Matrix
 0000090E  E8 00000000 E		   call WriteString


 00000913  B6 16			    mov dh, 22
 00000915  B2 00			   mov dl, 0
 00000917  E8 00000000 E		   call gotoxy
 0000091C  BA 00000173 R		   mov edx,offset pressS
 00000921  E8 00000000 E		   call WriteString

 00000926  B6 18			    mov dh, 24
 00000928  B2 2D			   mov dl, 45
 0000092A  E8 00000000 E		   call gotoxy
					   
 0000092F			StartGame:
 0000092F  E8 00000000 E		   call ReadKey
 00000934  A2 0000005D R		   mov response, al
 00000939  80 0D 0000005D R		   Or response, 00100000B ; bitmask for lowercase conversion
	   20
 00000940  80 3D 0000005D R		   cmp response, 's'
	   73
 00000947  74 02			   je Level1Start
 00000949  EB E4			   jmp StartGame
					   
					   
 0000094B			Level1Start: 
 0000094B  C6 05 0000005D R		   mov response, 0 
	   00
 00000952  E8 00000000 E		   call clrscr
					   
 00000957  B6 0C			   mov dh, 12
 00000959  B2 14			   mov dl, 20
 0000095B  E8 00000000 E		   call gotoxy
 00000960  BA 00000066 R		   mov edx,offset Lvl1
 00000965  E8 00000000 E		   call WriteString
 0000096A  B8 000005DC			   mov eax,1500
 0000096F  E8 00000000 E		   call delay
 00000974  E8 00000000 E		   call clrscr

					   ; Level 1 code area
 00000979  6A 05			   push 5		;Push number of falling items
 0000097B  E8 FFFFFED2			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 00000980  83 C4 04			   add esp,4
					  
 00000983  6A 05			   push 5
 00000985  68 0000000F R		   push offset xArray
 0000098A  6A 2D			   push 45
 0000098C  E8 FFFFF958			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000991  83 C4 0C			   add esp,12
					  
 00000994  E8 FFFFFA2C			   call Startposition
					   
 00000999  E8 FFFFFA45			   call Level1
					   ; End of Level 1 code area
 0000099E  E8 00000000 E		   call clrscr
					   
 000009A3  B6 0C			   mov dh, 12
 000009A5  B2 02			   mov dl, 2
 000009A7  E8 00000000 E		   call gotoxy
 000009AC  BA 0000008E R		   mov edx,offset Lvl1C
 000009B1  E8 00000000 E		   call WriteString
 000009B6  B8 000007D0			   mov eax,2000
 000009BB  E8 00000000 E		   call delay
					  
 000009C0			Level2Start:
 000009C0  E8 00000000 E		   call clrscr


 000009C5  E8 000001E3			   call RefreshY
 000009CA  B6 0C			   mov dh, 12
 000009CC  B2 14			   mov dl, 20
 000009CE  E8 00000000 E		   call gotoxy
 000009D3  BA 0000006E R		   mov edx,offset Lvl2
 000009D8  E8 00000000 E		   call WriteString
 000009DD  B8 000005DC			   mov eax,1500
 000009E2  E8 00000000 E		   call delay
 000009E7  E8 00000000 E		   call clrscr

					   	   ; Level 2 code area
 000009EC  6A 07			   push 7		;Push number of falling items
 000009EE  E8 FFFFFE5F			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 000009F3  83 C4 04			   add esp,4
					  
 000009F6  6A 07			   push 7
 000009F8  68 0000000F R		   push offset xArray
 000009FD  6A 2D			   push 45
 000009FF  E8 FFFFF8E5			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000A04  83 C4 0C			   add esp,12
					  
 00000A07  E8 FFFFF9B9			   call Startposition
					   
 00000A0C  E8 FFFFFAB5			   call Level2

					   
 00000A11  E8 00000000 E		   call clrscr

 00000A16  B6 0C			   mov dh, 12
 00000A18  B2 02			   mov dl, 2
 00000A1A  E8 00000000 E		   call gotoxy
 00000A1F  BA 000000B9 R		   mov edx,offset Lvl2C
 00000A24  E8 00000000 E		   call WriteString
 00000A29  B8 000007D0			   mov eax,2000
 00000A2E  E8 00000000 E		   call delay
 00000A33			Level3Start:

 00000A33  E8 00000000 E		   call clrscr

 00000A38  E8 00000170			   call RefreshY
 00000A3D  B6 0C			   mov dh, 12
 00000A3F  B2 14			   mov dl, 20
 00000A41  E8 00000000 E		   call gotoxy
 00000A46  BA 00000076 R		   mov edx,offset Lvl3
 00000A4B  E8 00000000 E		   call WriteString
 00000A50  B8 000005DC			   mov eax,1500
 00000A55  E8 00000000 E		   call delay
 00000A5A  E8 00000000 E		   call clrscr

					   	   ; Level 3 code area
 00000A5F  6A 09			   push 9		;Push number of falling items
 00000A61  E8 FFFFFDEC			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 00000A66  83 C4 04			   add esp,4
					  
 00000A69  6A 09			   push 9
 00000A6B  68 0000000F R		   push offset xArray
 00000A70  6A 2D			   push 45
 00000A72  E8 FFFFF872			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000A77  83 C4 0C			   add esp,12
					  
 00000A7A  E8 FFFFF946			   call Startposition
					   
 00000A7F  E8 FFFFFB25			   call Level3

					   ; End of Level 3 code area
 00000A84  E8 00000000 E		   call clrscr

 00000A89  B6 0C			   mov dh, 12
 00000A8B  B2 02			   mov dl, 2
 00000A8D  E8 00000000 E		   call gotoxy
 00000A92  BA 000000E4 R		   mov edx,offset Lvl3C
 00000A97  E8 00000000 E		   call WriteString
 00000A9C  B8 000007D0			   mov eax,2000
 00000AA1  E8 00000000 E		   call delay
 00000AA6			Level4Start:
 00000AA6  E8 00000000 E		   call clrscr

 00000AAB  E8 000000FD			   call RefreshY
 00000AB0  B6 0C			   mov dh, 12
 00000AB2  B2 14			   mov dl, 20
 00000AB4  E8 00000000 E		   call gotoxy
 00000AB9  BA 0000007E R		   mov edx,offset Lvl4
 00000ABE  E8 00000000 E		   call WriteString
 00000AC3  B8 000005DC			   mov eax,1500
 00000AC8  E8 00000000 E		   call delay
 00000ACD  E8 00000000 E		   call clrscr

					   	   ; Level 4 code area
 00000AD2  6A 0C			   push 12		;Push number of falling items
 00000AD4  E8 FFFFFD79			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 00000AD9  83 C4 04			   add esp,4
					  
 00000ADC  6A 0C			   push 12
 00000ADE  68 0000000F R		   push offset xArray
 00000AE3  6A 2D			   push 45
 00000AE5  E8 FFFFF7FF			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000AEA  83 C4 0C			   add esp,12
					  
 00000AED  E8 FFFFF8D3			   call Startposition
					   
 00000AF2  E8 FFFFFB95			   call Level4

					   ; End of Level 4 code area
 00000AF7  E8 00000000 E		   call clrscr

 00000AFC  B6 0C			   mov dh, 12
 00000AFE  B2 02			   mov dl, 2
 00000B00  E8 00000000 E		   call gotoxy
 00000B05  BA 0000010F R		   mov edx,offset Lvl4C
 00000B0A  E8 00000000 E		   call WriteString
 00000B0F  B8 000007D0			   mov eax,2000
 00000B14  E8 00000000 E		   call delay
					   
 00000B19			Level5Start:
 00000B19  E8 00000000 E		   call clrscr

 00000B1E  E8 0000008A			   call RefreshY
 00000B23  B6 0C			   mov dh, 12
 00000B25  B2 14			   mov dl, 20
 00000B27  E8 00000000 E		   call gotoxy
 00000B2C  BA 00000086 R		   mov edx,offset Lvl5
 00000B31  E8 00000000 E		   call WriteString
 00000B36  B8 000003E8			   mov eax,1000
 00000B3B  E8 00000000 E		   call delay
 00000B40  E8 00000000 E		   call clrscr

					   	   ; Level 5 code area
 00000B45  6A 0F			   push 15		;Push number of falling items
 00000B47  E8 FFFFFD06			   call newNum      ;fills 5 items in rainArray with either a char 1 or char 0 for printing purposes. 
 00000B4C  83 C4 04			   add esp,4
					  
 00000B4F  6A 0F			   push 15
 00000B51  68 0000000F R		   push offset xArray
 00000B56  6A 2D			   push 45
 00000B58  E8 FFFFF78C			   call FillArray ; Populates the xArray with 5 X coordinates from 0 to 44
 00000B5D  83 C4 0C			   add esp,12
					  
 00000B60  E8 FFFFF860			   call Startposition
					   
 00000B65  E8 FFFFFC05			   call Level5

					   ; End of Level 5 code area
 00000B6A  E8 00000000 E		   call clrscr

 00000B6F  B6 0C			   mov dh, 12
 00000B71  B2 00			   mov dl, 0
 00000B73  E8 00000000 E		   call gotoxy
 00000B78  BA 0000013A R		   mov edx,offset Lvl5C
 00000B7D  E8 00000000 E		   call WriteString
 00000B82  B6 0B			   mov dh, 11
 00000B84  B2 18			   mov dl, 24
 00000B86  E8 00000000 E		   call gotoxy
 00000B8B  B0 01			   mov al, 1
 00000B8D  E8 00000000 E		   call WriteChar
 00000B92  B8 000007D0			   mov eax,2000
 00000B97  E8 00000000 E		   call delay
 00000B9C  E8 00000000 E		   call clrscr
 00000BA1  EB 00			   jmp EndGame

 00000BA3			EndGame:
						exit
						
 00000BAA			EndCheck:	
						ret
 00000BAD			Death ENDP

				;-------------------------------------------------------------------------------
 00000BAD			RefreshY proc
					
 00000BAD  BE 00000000			mov esi, 0
 00000BB2			freshLoop:
 00000BB2  83 FE 0E			cmp esi, 14
 00000BB5  77 0A			ja endFresh
					
 00000BB7  C6 86 00000000 R		mov yArray[esi] , 0
	   00
 00000BBE  46				inc esi
 00000BBF  EB F1			jmp freshLoop
 00000BC1			endFresh:
 00000BC1  C3				ret
 00000BC2			RefreshY endp



				END main

Microsoft (R) Macro Assembler Version 11.00.61030.0	    04/24/15 01:21:18
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000199 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000BC2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Death  . . . . . . . . . . . . .	P Near	 00000889 _TEXT	Length= 00000324 Public STDCALL
  loop1  . . . . . . . . . . . .	L Near	 000008AA _TEXT	
  answer . . . . . . . . . . . .	L Near	 000008D2 _TEXT	
  yes  . . . . . . . . . . . . .	L Near	 000008F2 _TEXT	
  StartGame  . . . . . . . . . .	L Near	 0000092F _TEXT	
  Level1Start  . . . . . . . . .	L Near	 0000094B _TEXT	
  Level2Start  . . . . . . . . .	L Near	 000009C0 _TEXT	
  Level3Start  . . . . . . . . .	L Near	 00000A33 _TEXT	
  Level4Start  . . . . . . . . .	L Near	 00000AA6 _TEXT	
  Level5Start  . . . . . . . . .	L Near	 00000B19 _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 00000BA3 _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 00000BAA _TEXT	
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FillArray  . . . . . . . . . . .	P Near	 000002E9 _TEXT	Length= 00000024 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002F8 _TEXT	
  endL1  . . . . . . . . . . . .	L Near	 0000030A _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LeftIf . . . . . . . . . . . . .	P Near	 0000039E _TEXT	Length= 00000027 Public STDCALL
  Then2  . . . . . . . . . . . .	L Near	 000003A6 _TEXT	
  if6  . . . . . . . . . . . . .	L Near	 000003AC _TEXT	
  then6  . . . . . . . . . . . .	L Near	 000003B7 _TEXT	
  end6 . . . . . . . . . . . . .	L Near	 000003BE _TEXT	
  endleft  . . . . . . . . . . .	L Near	 000003C3 _TEXT	
Level1 . . . . . . . . . . . . .	P Near	 000003E3 _TEXT	Length= 000000E3 Public STDCALL
  PrintAll . . . . . . . . . . .	L Near	 000003FC _TEXT	
  four . . . . . . . . . . . . .	L Near	 0000040E _TEXT	
  end4 . . . . . . . . . . . . .	L Near	 00000413 _TEXT	
  inLoop2  . . . . . . . . . . .	L Near	 00000413 _TEXT	
  decrease . . . . . . . . . . .	L Near	 00000448 _TEXT	
  endD . . . . . . . . . . . . .	L Near	 00000449 _TEXT	
  endinLoop  . . . . . . . . . .	L Near	 00000450 _TEXT	
  random . . . . . . . . . . . .	L Near	 0000049A _TEXT	
  Increase . . . . . . . . . . .	L Near	 000004B0 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000004C5 _TEXT	
Level2 . . . . . . . . . . . . .	P Near	 000004C6 _TEXT	Length= 000000E3 Public STDCALL
  PrintAll . . . . . . . . . . .	L Near	 000004DF _TEXT	
  four . . . . . . . . . . . . .	L Near	 000004F1 _TEXT	
  end4 . . . . . . . . . . . . .	L Near	 000004F6 _TEXT	
  inLoop2  . . . . . . . . . . .	L Near	 000004F6 _TEXT	
  decrease . . . . . . . . . . .	L Near	 0000052B _TEXT	
  endD . . . . . . . . . . . . .	L Near	 0000052C _TEXT	
  endinLoop  . . . . . . . . . .	L Near	 00000533 _TEXT	
  random . . . . . . . . . . . .	L Near	 0000057D _TEXT	
  Increase . . . . . . . . . . .	L Near	 00000593 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000005A8 _TEXT	
Level3 . . . . . . . . . . . . .	P Near	 000005A9 _TEXT	Length= 000000E3 Public STDCALL
  PrintAll . . . . . . . . . . .	L Near	 000005C2 _TEXT	
  four . . . . . . . . . . . . .	L Near	 000005D4 _TEXT	
  end4 . . . . . . . . . . . . .	L Near	 000005D9 _TEXT	
  inLoop2  . . . . . . . . . . .	L Near	 000005D9 _TEXT	
  decrease . . . . . . . . . . .	L Near	 0000060E _TEXT	
  endD . . . . . . . . . . . . .	L Near	 0000060F _TEXT	
  endinLoop  . . . . . . . . . .	L Near	 00000616 _TEXT	
  random . . . . . . . . . . . .	L Near	 00000660 _TEXT	
  Increase . . . . . . . . . . .	L Near	 00000676 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 0000068B _TEXT	
Level4 . . . . . . . . . . . . .	P Near	 0000068C _TEXT	Length= 000000E3 Public STDCALL
  PrintAll . . . . . . . . . . .	L Near	 000006A5 _TEXT	
  four . . . . . . . . . . . . .	L Near	 000006B7 _TEXT	
  end4 . . . . . . . . . . . . .	L Near	 000006BC _TEXT	
  inLoop2  . . . . . . . . . . .	L Near	 000006BC _TEXT	
  decrease . . . . . . . . . . .	L Near	 000006F1 _TEXT	
  endD . . . . . . . . . . . . .	L Near	 000006F2 _TEXT	
  endinLoop  . . . . . . . . . .	L Near	 000006F9 _TEXT	
  random . . . . . . . . . . . .	L Near	 00000743 _TEXT	
  Increase . . . . . . . . . . .	L Near	 00000759 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 0000076E _TEXT	
Level5 . . . . . . . . . . . . .	P Near	 0000076F _TEXT	Length= 000000E3 Public STDCALL
  PrintAll . . . . . . . . . . .	L Near	 00000788 _TEXT	
  four . . . . . . . . . . . . .	L Near	 0000079A _TEXT	
  end4 . . . . . . . . . . . . .	L Near	 0000079F _TEXT	
  inLoop2  . . . . . . . . . . .	L Near	 0000079F _TEXT	
  decrease . . . . . . . . . . .	L Near	 000007D4 _TEXT	
  endD . . . . . . . . . . . . .	L Near	 000007D5 _TEXT	
  endinLoop  . . . . . . . . . .	L Near	 000007DC _TEXT	
  random . . . . . . . . . . . .	L Near	 00000826 _TEXT	
  Increase . . . . . . . . . . .	L Near	 0000083C _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 00000851 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RefreshY . . . . . . . . . . . .	P Near	 00000BAD _TEXT	Length= 00000015 Public STDCALL
  freshLoop  . . . . . . . . . .	L Near	 00000BB2 _TEXT	
  endFresh . . . . . . . . . . .	L Near	 00000BC1 _TEXT	
Reset  . . . . . . . . . . . . .	P Near	 0000030D _TEXT	Length= 00000038 Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 0000032C _TEXT	
  _End . . . . . . . . . . . . .	L Near	 00000335 _TEXT	
RightIf  . . . . . . . . . . . .	P Near	 00000380 _TEXT	Length= 0000001E Public STDCALL
  Then1  . . . . . . . . . . . .	L Near	 00000388 _TEXT	
  outX . . . . . . . . . . . . .	L Near	 00000397 _TEXT	
  endright . . . . . . . . . . .	L Near	 0000039C _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StartPosition  . . . . . . . . .	P Near	 000003C5 _TEXT	Length= 0000001E Public STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fall . . . . . . . . . . . . . .	P Near	 00000345 _TEXT	Length= 0000003B Public STDCALL
  All  . . . . . . . . . . . . .	L Near	 00000349 _TEXT	
  _Reset . . . . . . . . . . . .	L Near	 00000354 _TEXT	
  EndReset . . . . . . . . . . .	L Near	 00000372 _TEXT	
  Death  . . . . . . . . . . . .	L Near	 00000372 _TEXT	
  endDeath . . . . . . . . . . .	L Near	 00000377 _TEXT	
  EndAll . . . . . . . . . . . .	L Near	 0000037D _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002E9 Public STDCALL
  StartGame  . . . . . . . . . .	L Near	 0000006A _TEXT	
  Level1Start  . . . . . . . . .	L Near	 00000086 _TEXT	
  Level2Start  . . . . . . . . .	L Near	 000000FB _TEXT	
  Level3Start  . . . . . . . . .	L Near	 0000016E _TEXT	
  Level4Start  . . . . . . . . .	L Near	 000001E1 _TEXT	
  Level5Start  . . . . . . . . .	L Near	 00000254 _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 000002E2 _TEXT	
newNum . . . . . . . . . . . . .	P Near	 00000852 _TEXT	Length= 00000037 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000085D _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000087A _TEXT	
  ENDL . . . . . . . . . . . . .	L Near	 00000887 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Lvl1C  . . . . . . . . . . . . .	Byte	 0000008E _DATA	
Lvl1 . . . . . . . . . . . . . .	Byte	 00000066 _DATA	
Lvl2C  . . . . . . . . . . . . .	Byte	 000000B9 _DATA	
Lvl2 . . . . . . . . . . . . . .	Byte	 0000006E _DATA	
Lvl3C  . . . . . . . . . . . . .	Byte	 000000E4 _DATA	
Lvl3 . . . . . . . . . . . . . .	Byte	 00000076 _DATA	
Lvl4C  . . . . . . . . . . . . .	Byte	 0000010F _DATA	
Lvl4 . . . . . . . . . . . . . .	Byte	 0000007E _DATA	
Lvl5C  . . . . . . . . . . . . .	Byte	 0000013A _DATA	
Lvl5 . . . . . . . . . . . . . .	Byte	 00000086 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Matrix . . . . . . . . . . . . .	Byte	 00000167 _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WindowRect . . . . . . . . . . .	SMALL_RECT  00000191 _DATA	
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
beginX . . . . . . . . . . . . .	Byte	 00000039 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
count  . . . . . . . . . . . . .	DWord	 0000005E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deathMessage . . . . . . . . . .	Byte	 0000003A _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
items  . . . . . . . . . . . . .	DWord	 00000062 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outHandle  . . . . . . . . . . .	DWord	 0000018D _DATA	
pressS . . . . . . . . . . . . .	Byte	 00000173 _DATA	
rainArray  . . . . . . . . . . .	Byte	 0000001E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
replay . . . . . . . . . . . . .	Byte	 0000004B _DATA	
response . . . . . . . . . . . .	Byte	 0000005D _DATA	
titleStr . . . . . . . . . . . .	Byte	 0000002D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xArray . . . . . . . . . . . . .	Byte	 0000000F _DATA	
yArray . . . . . . . . . . . . .	Byte	 00000000 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
